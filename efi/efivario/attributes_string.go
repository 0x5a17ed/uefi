// Code generated by "stringer -flags -type=Attributes attributes.go"; DO NOT EDIT.

package efivario

import (
	"math/bits"
	"strconv"
	"strings"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NonVolatile-1]
	_ = x[BootServiceAccess-2]
	_ = x[RuntimeAccess-4]
	_ = x[HardwareErrorRecord-8]
	_ = x[AuthenticatedWriteAccess-16]
	_ = x[TimeBasedAuthenticatedWriteAccess-32]
	_ = x[AppendWrite-64]
	_ = x[EnhancedAuthenticatedAccess-128]
}

const (
	_Attributes_name_0 = "NonVolatileBootServiceAccess"
	_Attributes_name_1 = "RuntimeAccess"
	_Attributes_name_2 = "HardwareErrorRecord"
	_Attributes_name_3 = "AuthenticatedWriteAccess"
	_Attributes_name_4 = "TimeBasedAuthenticatedWriteAccess"
	_Attributes_name_5 = "AppendWrite"
	_Attributes_name_6 = "EnhancedAuthenticatedAccess"
)

var (
	_Attributes_index_0 = [...]uint8{0, 11, 28}
)

func (i Attributes) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _Attributes_name_0[_Attributes_index_0[i]:_Attributes_index_0[i+1]]
	case i == 4:
		return _Attributes_name_1
	case i == 8:
		return _Attributes_name_2
	case i == 16:
		return _Attributes_name_3
	case i == 32:
		return _Attributes_name_4
	case i == 64:
		return _Attributes_name_5
	case i == 128:
		return _Attributes_name_6
	default:
		out := make([]string, 0, bits.OnesCount64(uint64(i)))

		if i&1 != 0 {
			out = append(out, _Attributes_name_0[_Attributes_index_0[0]:_Attributes_index_0[1]])
			i &^= 1
		}
		if i&2 != 0 {
			out = append(out, _Attributes_name_0[_Attributes_index_0[1]:_Attributes_index_0[2]])
			i &^= 2
		}
		if i&4 != 0 {
			out = append(out, _Attributes_name_1)
			i &^= 4
		}
		if i&8 != 0 {
			out = append(out, _Attributes_name_2)
			i &^= 8
		}
		if i&16 != 0 {
			out = append(out, _Attributes_name_3)
			i &^= 16
		}
		if i&32 != 0 {
			out = append(out, _Attributes_name_4)
			i &^= 32
		}
		if i&64 != 0 {
			out = append(out, _Attributes_name_5)
			i &^= 64
		}
		if i&128 != 0 {
			out = append(out, _Attributes_name_6)
			i &^= 128
		}
		if i != 0 {
			out = append(out, "Attributes("+strconv.FormatInt(int64(i), 10)+")")
		}
		if len(out) > 0 {
			return strings.Join(out, ", ")
		}
		return "Attributes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
